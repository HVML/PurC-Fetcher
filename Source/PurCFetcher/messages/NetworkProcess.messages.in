# Copyright (C) 2012-2020 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

messages -> NetworkProcess LegacyReceiver {
    # Initializes the network process.
    InitializeNetworkProcess(struct PurcFetcher::NetworkProcessCreationParameters processCreationParameters)

    # Creates a connection for communication with a WebProcess
    CreateNetworkConnectionToWebProcess(PurcFetcher::ProcessIdentifier processIdentifier, PAL::SessionID sessionID) -> (Optional<IPC::Attachment> connectionIdentifier, enum:uint8_t PurcFetcher::HTTPCookieAcceptPolicy cookieAcceptPolicy) Async

#if USE(SOUP)
    SetIgnoreTLSErrors(bool ignoreTLSErrors)
    UserPreferredLanguagesChanged(Vector<String> languages)
    SetNetworkProxySettings(struct PurcFetcher::SoupNetworkProxySettings settings)
    PrefetchDNS(String hostname)
#endif

#if USE(CURL)
    SetNetworkProxySettings(PAL::SessionID sessionID, PurcFetcher::CurlProxySettings settings)
#endif

    ClearCachedCredentials()

    AddWebsiteDataStore(struct PurcFetcher::WebsiteDataStoreParameters websiteDataStoreParameters);
    DestroySession(PAL::SessionID sessionID)

    FetchWebsiteData(PAL::SessionID sessionID, OptionSet<PurcFetcher::WebsiteDataType> websiteDataTypes, OptionSet<PurcFetcher::WebsiteDataFetchOption> fetchOptions, PurcFetcher::CallbackID callbackID)
    DeleteWebsiteData(PAL::SessionID sessionID, OptionSet<PurcFetcher::WebsiteDataType> websiteDataTypes, WallTime modifiedSince, PurcFetcher::CallbackID callbackID)
    DeleteWebsiteDataForOrigins(PAL::SessionID sessionID, OptionSet<PurcFetcher::WebsiteDataType> websiteDataTypes, Vector<PurcFetcher::SecurityOriginData> origins, Vector<String> cookieHostNames, Vector<String> HSTSCacheHostNames, Vector<PurcFetcher::RegistrableDomain> registrableDomains, PurcFetcher::CallbackID callbackID)
    RenameOriginInWebsiteData(PAL::SessionID sessionID, URL oldDomain, URL newDomain, OptionSet<PurcFetcher::WebsiteDataType> websiteDataTypes) -> () Async

    DownloadRequest(PAL::SessionID sessionID, PurcFetcher::DownloadID downloadID, PurcFetcher::ResourceRequest request, enum:bool Optional<PurcFetcher::NavigatingToAppBoundDomain> isNavigatingToAppBoundDomain, String suggestedFilename)
    ResumeDownload(PAL::SessionID sessionID, PurcFetcher::DownloadID downloadID, IPC::DataReference resumeData, String path, PurcFetcher::SandboxExtension::Handle sandboxExtensionHandle)
    CancelDownload(PurcFetcher::DownloadID downloadID)
#if PLATFORM(COCOA)
    PublishDownloadProgress(PurcFetcher::DownloadID downloadID, URL url, PurcFetcher::SandboxExtension::Handle sandboxExtensionHandle)
#endif
    ApplicationDidEnterBackground()
    ApplicationWillEnterForeground()

    ContinueWillSendRequest(PurcFetcher::DownloadID downloadID, PurcFetcher::ResourceRequest request)
    ContinueDecidePendingDownloadDestination(PurcFetcher::DownloadID downloadID, String destination, PurcFetcher::SandboxExtension::Handle sandboxExtensionHandle, bool allowOverwrite)

#if PLATFORM(COCOA)
    SetQOS(int latencyQOS, int throughputQOS)
    SetStorageAccessAPIEnabled(bool enabled)
#endif
    SetAllowsAnySSLCertificateForWebSocket(bool enabled) -> () Synchronous

    SyncAllCookies()

    AllowSpecificHTTPSCertificateForHost(PurcFetcher::CertificateInfo certificate, String host)

    SetCacheModel(enum:uint8_t PurcFetcher::CacheModel cacheModel)
    SetCacheModelSynchronouslyForTesting(enum:uint8_t PurcFetcher::CacheModel cacheModel) -> () Synchronous

    ProcessDidTransitionToBackground()
    ProcessDidTransitionToForeground()

    ProcessWillSuspendImminentlyForTestingSync() -> () Synchronous
    PrepareToSuspend(bool isSuspensionImminent) -> () Async
    ProcessDidResume()

    PreconnectTo(PAL::SessionID sessionID, PurcFetcher::WebPageProxyIdentifier webPageProxyID, PurcFetcher::PageIdentifier webPageID, URL url, String userAgent, enum:uint8_t PurcFetcher::StoredCredentialsPolicy storedCredentialsPolicy, enum:bool Optional<PurcFetcher::NavigatingToAppBoundDomain> isNavigatingToAppBoundDomain);

#if ENABLE(RESOURCE_LOAD_STATISTICS)
    ClearPrevalentResource(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain resourceDomain) -> () Async
    ClearUserInteraction(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain resourceDomain) -> () Async
    DumpResourceLoadStatistics(PAL::SessionID sessionID) -> (String dumpedStatistics) Async
    SetResourceLoadStatisticsEnabled(PAL::SessionID sessionID, bool enabled)
    SetResourceLoadStatisticsLogTestingEvent(bool enabled)
    UpdatePrevalentDomainsToBlockCookiesFor(PAL::SessionID sessionID, Vector<PurcFetcher::RegistrableDomain> domainsToBlock) -> () Async
    IsGrandfathered(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain targetDomain) -> (bool isGrandfathered) Async
    IsPrevalentResource(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain targetDomain) -> (bool isPrevalent) Async
    IsVeryPrevalentResource(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain targetDomain) -> (bool isVeryPrevalent) Async
    SetAgeCapForClientSideCookies(PAL::SessionID sessionID, Optional<Seconds> seconds) -> () Async
    SetLastSeen(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain resourceDomain, Seconds seconds) -> () Async
    MergeStatisticForTesting(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain resourceDomain, PurcFetcher::RegistrableDomain topFrameDomain1, PurcFetcher::RegistrableDomain topFrameDomain2, Seconds lastSeen, bool hadUserInteraction, Seconds mostRecentUserInteraction, bool isGrandfathered, bool isPrevalent, bool isVeryPrevalent, uint64_t dataRecordsRemoved) -> () Async
    InsertExpiredStatisticForTesting(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain resourceDomain, bool hadUserInteraction, bool isScheduledForAllButCookieDataRemoval, bool isPrevalent) -> () Async
    SetPrevalentResource(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain resourceDomain) -> () Async
    SetPrevalentResourceForDebugMode(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain resourceDomain) -> () Async
    IsResourceLoadStatisticsEphemeral(PAL::SessionID sessionID) -> (bool isEphemeral) Async
    HadUserInteraction(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain resourceDomain) -> (bool hadUserInteraction) Async
    IsRelationshipOnlyInDatabaseOnce(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain subDomain, PurcFetcher::RegistrableDomain topDomain) -> (bool hadUserInteraction) Async
    HasLocalStorage(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain resourceDomain) -> (bool hadUserInteraction) Async
    GetAllStorageAccessEntries(PAL::SessionID sessionID) -> (Vector<String> domains) Async
    IsRegisteredAsRedirectingTo(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain redirectedFromDomain, PurcFetcher::RegistrableDomain redirectedToDomain) -> (bool isRedirectingTo) Async
    IsRegisteredAsSubFrameUnder(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain subFrameDomain, PurcFetcher::RegistrableDomain topFrameDomain) -> (bool isSubframeUnder) Async
    IsRegisteredAsSubresourceUnder(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain subresourceDomain, PurcFetcher::RegistrableDomain topFrameDomain) -> (bool isSubresourceUnder) Async
    DomainIDExistsInDatabase(PAL::SessionID sessionID, int domainID) -> (bool exists) Async
    LogFrameNavigation(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain targetDomain, PurcFetcher::RegistrableDomain topFrameDomain, PurcFetcher::RegistrableDomain sourceDomain, bool isRedirect, bool isMainFrame, Seconds delayAfterMainFrameDocumentLoad, bool wasPotentiallyInitiatedByUser)
    LogUserInteraction(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain topFrameDomain) -> () Async
    ResetParametersToDefaultValues(PAL::SessionID sessionID) -> () Async
    ScheduleClearInMemoryAndPersistent(PAL::SessionID sessionID, Optional<WallTime> modifiedSince, enum:bool PurcFetcher::ShouldGrandfatherStatistics shouldGrandfather) -> () Async
    ScheduleCookieBlockingUpdate(PAL::SessionID sessionID) -> () Async
    ScheduleStatisticsAndDataRecordsProcessing(PAL::SessionID sessionID) -> () Async
    StatisticsDatabaseHasAllTables(PAL::SessionID sessionID) -> (bool hasAllTables) Async
    SubmitTelemetry(PAL::SessionID sessionID) -> () Async
    SetCacheMaxAgeCapForPrevalentResources(PAL::SessionID sessionID, Seconds seconds) -> () Async
    SetGrandfathered(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain resourceDomain, bool isGrandfathered) -> () Async
    SetUseITPDatabase(PAL::SessionID sessionID, bool value) -> () Async
    SetGrandfatheringTime(PAL::SessionID sessionID, Seconds seconds) -> () Async
    SetMaxStatisticsEntries(PAL::SessionID sessionID, uint64_t maximumEntryCount) -> () Async
    SetMinimumTimeBetweenDataRecordsRemoval(PAL::SessionID sessionID, Seconds seconds) -> () Async
    SetPruneEntriesDownTo(PAL::SessionID sessionID, uint64_t maximumEntryCount) -> () Async
    SetShouldClassifyResourcesBeforeDataRecordsRemoval(PAL::SessionID sessionID, bool value) -> () Async
    SetNotifyPagesWhenDataRecordsWereScanned(PAL::SessionID sessionID, bool value) -> () Async
    SetIsRunningResourceLoadStatisticsTest(PAL::SessionID sessionID, bool value) -> () Async
    SetNotifyPagesWhenTelemetryWasCaptured(PAL::SessionID sessionID, bool value) -> () Async
    SetResourceLoadStatisticsDebugMode(PAL::SessionID sessionID, bool debugMode) -> () Async
    SetVeryPrevalentResource(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain resourceDomain) -> () Async
    SetSubframeUnderTopFrameDomain(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain subFrameDomain, PurcFetcher::RegistrableDomain topFrameDomain) -> () Async
    SetSubresourceUnderTopFrameDomain(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain subresourceDomain, PurcFetcher::RegistrableDomain topFrameDomain) -> () Async
    SetSubresourceUniqueRedirectTo(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain subresourceDomain, PurcFetcher::RegistrableDomain redirectedToDomain) -> () Async
    SetSubresourceUniqueRedirectFrom(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain subresourceDomain, PurcFetcher::RegistrableDomain redirectedFromDomain) -> () Async
    SetTimeToLiveUserInteraction(PAL::SessionID sessionID, Seconds seconds) -> () Async
    SetTopFrameUniqueRedirectTo(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain topFrameDomain, PurcFetcher::RegistrableDomain redirectedToDomain) -> () Async
    SetTopFrameUniqueRedirectFrom(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain topFrameDomain, PurcFetcher::RegistrableDomain redirectedFromDomain) -> () Async
    ResetCacheMaxAgeCapForPrevalentResources(PAL::SessionID sessionID) -> () Async
    DidCommitCrossSiteLoadWithDataTransfer(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain fromDomain, PurcFetcher::RegistrableDomain toDomain, OptionSet<PurcFetcher::CrossSiteNavigationDataTransfer::Flag> navigationDataTransfer, PurcFetcher::WebPageProxyIdentifier webPageProxyID, PurcFetcher::PageIdentifier webPageID)
    SetCrossSiteLoadWithLinkDecorationForTesting(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain fromDomain, PurcFetcher::RegistrableDomain toDomain) -> () Async
    ResetCrossSiteLoadsWithLinkDecorationForTesting(PAL::SessionID sessionID) -> () Async
    DeleteCookiesForTesting(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain domain, bool includeHttpOnlyCookies) -> () Async
    HasIsolatedSession(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain domain) -> (bool hasIsolatedSession) Async
    SetAppBoundDomainsForResourceLoadStatistics(PAL::SessionID sessionID, HashSet<PurcFetcher::RegistrableDomain> appBoundDomains) -> () Async
    SetShouldDowngradeReferrerForTesting(bool enabled) -> () Async
    SetThirdPartyCookieBlockingMode(PAL::SessionID sessionID, enum:uint8_t PurcFetcher::ThirdPartyCookieBlockingMode blockingMode) -> () Async
    SetShouldEnbleSameSiteStrictEnforcementForTesting(PAL::SessionID sessionID, enum:bool PurcFetcher::SameSiteStrictEnforcementEnabled enabled) -> () Async
    SetFirstPartyWebsiteDataRemovalModeForTesting(PAL::SessionID sessionID, enum:uint8_t PurcFetcher::FirstPartyWebsiteDataRemovalMode mode) -> () Async
    SetToSameSiteStrictCookiesForTesting(PAL::SessionID sessionID, PurcFetcher::RegistrableDomain domain) -> () Async
#endif

    SetAdClickAttributionDebugMode(bool debugMode)

    SetSessionIsControlledByAutomation(PAL::SessionID sessionID, bool controlled);

    RegisterURLSchemeAsSecure(String scheme)
    RegisterURLSchemeAsBypassingContentSecurityPolicy(String scheme)
    RegisterURLSchemeAsLocal(String scheme)
    RegisterURLSchemeAsNoAccess(String scheme)

    SetCacheStorageParameters(PAL::SessionID sessionID, String cacheStorageDirectory, PurcFetcher::SandboxExtension::Handle handle);

    SyncLocalStorage() -> () Synchronous
    ClearLegacyPrivateBrowsingLocalStorage()

    StoreAdClickAttribution(PAL::SessionID sessionID, PurcFetcher::AdClickAttribution adClickAttribution)
    DumpAdClickAttribution(PAL::SessionID sessionID) -> (String adClickAttributionState) Async
    ClearAdClickAttribution(PAL::SessionID sessionID) -> () Async
    SetAdClickAttributionOverrideTimerForTesting(PAL::SessionID sessionID, bool value) -> () Async
    SetAdClickAttributionConversionURLForTesting(PAL::SessionID sessionID, URL url) -> () Async
    MarkAdClickAttributionsAsExpiredForTesting(PAL::SessionID sessionID) -> () Async
    GetLocalStorageOriginDetails(PAL::SessionID sessionID) -> (Vector<PurcFetcher::LocalStorageDatabaseTracker::OriginDetails> details) Async

    SetServiceWorkerFetchTimeoutForTesting(Seconds seconds) -> () Synchronous
    ResetServiceWorkerFetchTimeoutForTesting() -> () Synchronous

    ResetQuota(PAL::SessionID sessionID) -> () Async
    
    HasAppBoundSession(PAL::SessionID sessionID) -> (bool hasAppBoundSession) Async
    ClearAppBoundSession(PAL::SessionID sessionID) -> () Async

#if PLATFORM(IOS_FAMILY) && !PLATFORM(MACCATALYST)
    DisableServiceWorkerEntitlement()
    ClearServiceWorkerEntitlementOverride() -> () Async
#endif
    UpdateBundleIdentifier(String bundleIdentifier) -> () Async
    ClearBundleIdentifier() -> () Async
}
