# Copyright (C) 2012-2020 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

messages -> NetworkProcessProxy LegacyReceiver NotRefCounted {
    DidReceiveAuthenticationChallenge(PAL::SessionID sessionID, PurcFetcher::WebPageProxyIdentifier pageID, Optional<PurcFetcher::SecurityOriginData> topOrigin, PurcFetcher::AuthenticationChallenge challenge, bool negotiatedLegacyTLS, uint64_t challengeID)
    NegotiatedLegacyTLS(PurcFetcher::WebPageProxyIdentifier pageID)
    DidNegotiateModernTLS(PurcFetcher::WebPageProxyIdentifier pageID, PurcFetcher::AuthenticationChallenge challenge)

    DidFetchWebsiteData(PurcFetcher::CallbackID callbackID, struct PurcFetcher::WebsiteData websiteData)
    DidDeleteWebsiteData(PurcFetcher::CallbackID callbackID)
    DidDeleteWebsiteDataForOrigins(PurcFetcher::CallbackID callbackID)

    DidSyncAllCookies()

    TestProcessIncomingSyncMessagesWhenWaitingForSyncReply(PurcFetcher::WebPageProxyIdentifier pageID) -> (bool handled) Synchronous
    TerminateUnresponsiveServiceWorkerProcesses(PurcFetcher::ProcessIdentifier processIdentifier)

    SetIsHoldingLockedFiles(bool isHoldingLockedFiles)

    # Diagnostic messages logging
    LogDiagnosticMessage(PurcFetcher::WebPageProxyIdentifier pageID, String message, String description, enum:bool PurcFetcher::ShouldSample shouldSample)
    LogDiagnosticMessageWithResult(PurcFetcher::WebPageProxyIdentifier pageID, String message, String description, uint32_t result, enum:bool PurcFetcher::ShouldSample shouldSample)
    LogDiagnosticMessageWithValue(PurcFetcher::WebPageProxyIdentifier pageID, String message, String description, double value, unsigned significantFigures, enum:bool PurcFetcher::ShouldSample shouldSample)

#if ENABLE(RESOURCE_LOAD_STATISTICS)
    LogTestingEvent(PAL::SessionID sessionID, String event)
    NotifyResourceLoadStatisticsProcessed()
    NotifyWebsiteDataDeletionForRegistrableDomainsFinished()
    NotifyWebsiteDataScanForRegistrableDomainsFinished()
    NotifyResourceLoadStatisticsTelemetryFinished(unsigned numberOfPrevalentResources, unsigned numberOfPrevalentResourcesWithUserInteraction, unsigned numberOfPrevalentResourcesWithoutUserInteraction, unsigned topPrevalentResourceWithUserInteractionDaysSinceUserInteraction, unsigned medianDaysSinceUserInteractionPrevalentResourceWithUserInteraction, unsigned top3NumberOfPrevalentResourcesWithUI, unsigned top3MedianSubFrameWithoutUI, unsigned top3MedianSubResourceWithoutUI, unsigned top3MedianUniqueRedirectsWithoutUI, unsigned top3MedianDataRecordsRemovedWithoutUI)
    RequestStorageAccessConfirm(PurcFetcher::WebPageProxyIdentifier pageID, PurcFetcher::FrameIdentifier frameID, PurcFetcher::RegistrableDomain subFrameDomain, PurcFetcher::RegistrableDomain topFrameDomain) -> (bool userDidGrantAccess) Async
    DeleteWebsiteDataInUIProcessForRegistrableDomains(PAL::SessionID sessionID, OptionSet<PurcFetcher::WebsiteDataType> dataTypes, OptionSet<PurcFetcher::WebsiteDataFetchOption> fetchOptions, Vector<PurcFetcher::RegistrableDomain> domains) -> (HashSet<PurcFetcher::RegistrableDomain> domainsWithMatchingDataRecords) Async
    DidCommitCrossSiteLoadWithDataTransferFromPrevalentResource(PurcFetcher::WebPageProxyIdentifier pageID)
    SetDomainsWithUserInteraction(HashSet<PurcFetcher::RegistrableDomain> domains)
#endif
#if ENABLE(CONTENT_EXTENSIONS)
    ContentExtensionRules(PurcFetcher::UserContentControllerIdentifier identifier)
#endif

    RetrieveCacheStorageParameters(PAL::SessionID sessionID)

    TerminateWebProcess(PurcFetcher::ProcessIdentifier webProcessIdentifier)

#if ENABLE(SERVICE_WORKER)
    EstablishWorkerContextConnectionToNetworkProcess(PurcFetcher::RegistrableDomain registrableDomain, PAL::SessionID sessionID) -> () Async
    WorkerContextConnectionNoLongerNeeded(PurcFetcher::ProcessIdentifier identifier)
    RegisterServiceWorkerClientProcess(PurcFetcher::ProcessIdentifier webProcessIdentifier, PurcFetcher::ProcessIdentifier serviceWorkerProcessIdentifier)
    UnregisterServiceWorkerClientProcess(PurcFetcher::ProcessIdentifier webProcessIdentifier, PurcFetcher::ProcessIdentifier serviceWorkerProcessIdentifier)
#endif

    SetWebProcessHasUploads(PurcFetcher::ProcessIdentifier processID, bool hasUpload)

    GetAppBoundDomains(PAL::SessionID sessionID) -> (HashSet<PurcFetcher::RegistrableDomain> appBoundDomains) Async

    RequestStorageSpace(PAL::SessionID sessionID, struct PurcFetcher::ClientOrigin origin, uint64_t quota, uint64_t currentSize, uint64_t spaceRequired) -> (Optional<uint64_t> newQuota) Async
    
    ResourceLoadDidSendRequest(PurcFetcher::WebPageProxyIdentifier pageIdentifier, struct PurcFetcher::ResourceLoadInfo resourceLoadInfo, PurcFetcher::ResourceRequest request, Optional<IPC::FormDataReference> httpBody)
    ResourceLoadDidPerformHTTPRedirection(PurcFetcher::WebPageProxyIdentifier pageIdentifier, struct PurcFetcher::ResourceLoadInfo resourceLoadInfo, PurcFetcher::ResourceResponse resourceResponse, PurcFetcher::ResourceRequest request)
    ResourceLoadDidReceiveChallenge(PurcFetcher::WebPageProxyIdentifier pageIdentifier, struct PurcFetcher::ResourceLoadInfo resourceLoadInfo, PurcFetcher::AuthenticationChallenge challenge)
    ResourceLoadDidReceiveResponse(PurcFetcher::WebPageProxyIdentifier pageIdentifier, struct PurcFetcher::ResourceLoadInfo resourceLoadInfo, PurcFetcher::ResourceResponse response)
    ResourceLoadDidCompleteWithError(PurcFetcher::WebPageProxyIdentifier pageIdentifier, struct PurcFetcher::ResourceLoadInfo resourceLoadInfo, PurcFetcher::ResourceResponse response, PurcFetcher::ResourceError error)
}
