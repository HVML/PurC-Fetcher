# Copyright (C) 2019 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

messages -> StorageManagerSet {
    ConnectToLocalStorageArea(PAL::SessionID sessionID, PurCFetcher::StorageNamespaceIdentifier storageNamespaceID, struct PurCFetcher::SecurityOriginData securityOriginData) -> (Optional<PurCFetcher::StorageAreaIdentifier> storageAreaID) Synchronous WantsConnection
    ConnectToTransientLocalStorageArea(PAL::SessionID sessionID, PurCFetcher::StorageNamespaceIdentifier storageNamespaceID, struct PurCFetcher::SecurityOriginData topLevelSecurityOriginData, struct PurCFetcher::SecurityOriginData securityOriginData) -> (Optional<PurCFetcher::StorageAreaIdentifier> storageAreaID) Synchronous WantsConnection
    ConnectToSessionStorageArea(PAL::SessionID sessionID, PurCFetcher::StorageNamespaceIdentifier storageNamespaceID, struct PurCFetcher::SecurityOriginData securityOriginData) -> (Optional<PurCFetcher::StorageAreaIdentifier> storageAreaID) Synchronous WantsConnection
    DisconnectFromStorageArea(PurCFetcher::StorageAreaIdentifier storageAreaID) WantsConnection
    GetValues(PurCFetcher::StorageAreaIdentifier storageAreaID) -> (HashMap<String, String> values) Synchronous WantsConnection
    CloneSessionStorageNamespace(PAL::SessionID sessionID, PurCFetcher::StorageNamespaceIdentifier fromStorageNamespaceID, PurCFetcher::StorageNamespaceIdentifier toStorageNamespaceID) WantsConnection

    SetItem(PurCFetcher::StorageAreaIdentifier storageAreaID, PurCFetcher::StorageAreaImplIdentifier storageAreaImplID, uint64_t storageMapSeed, String key, String value, String urlString) WantsConnection
    RemoveItem(PurCFetcher::StorageAreaIdentifier storageAreaID, PurCFetcher::StorageAreaImplIdentifier storageAreaImplID, uint64_t storageMapSeed, String key, String urlString) WantsConnection
    Clear(PurCFetcher::StorageAreaIdentifier storageAreaID, PurCFetcher::StorageAreaImplIdentifier storageAreaImplID, uint64_t storageMapSeed, String urlString) WantsConnection
}
